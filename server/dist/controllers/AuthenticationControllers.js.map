{"version":3,"sources":["../../src/controllers/AuthenticationControllers.js"],"names":["jwtSignUser","user","ONE_WEEK","sign","authentication","jwtSecret","expiresIn","register","req","res","create","body","console","log","status","json","error","send","login","email","password","find","where","isPasswordValid","comparePassword","userJson","toJSON","message","token","err"],"mappings":";;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAMC,WAAW,KAAK,EAAL,GAAU,EAAV,GAAe,CAAhC;AACA,SAAO,uBAAIC,IAAJ,CAASF,IAAT,EAAe,iBAAOG,cAAP,CAAsBC,SAArC,EAAgD;AACrDC,eAAWJ;AAD0C,GAAhD,CAAP;AAGD;;AAEM,MAAMK,8BAAW,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,MAAI;AACF,UAAMR,OAAO,MAAM,YAAKS,MAAL,CAAYF,IAAIG,IAAhB,CAAnB;AACAC,YAAQC,GAAR,CAAYZ,IAAZ;AACAQ,QAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBd,IAArB;AACD,GAJD,CAIE,OAAOe,KAAP,EAAc;AACdP,QAAIK,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AACnBD,aAAO;AADY,KAArB;AAGD;AACF,CAVM;;AAYA,MAAME,wBAAQ,OAAOV,GAAP,EAAYC,GAAZ,KAAoB;AACvC,MAAI;AACF,UAAM,EAAEU,KAAF,EAASC,QAAT,KAAsBZ,IAAIG,IAAhC;;AAEA,UAAMV,OAAO,MAAM,YAAKoB,IAAL,CAAU;AAC3BC,aAAO;AACLH;AADK;AADoB,KAAV,CAAnB;;AAMA,QAAI,CAAClB,IAAL,EAAW;AACTQ,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,qCAAT,EAArB;AACD;AACD,UAAMO,kBAAkB,MAAMtB,KAAKuB,eAAL,CAAqBJ,QAArB,CAA9B;;AAEAR,YAAQC,GAAR,CAAYU,eAAZ;;AAEA,QAAI,CAACA,eAAL,EAAsB;AACpBd,UAAIK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAO,qCAAT,EAArB;AACD;;AAED,UAAMS,WAAWxB,KAAKyB,MAAL,EAAjB;AACAjB,QAAIQ,IAAJ,CAAS;AACPU,eAAS,IADF;AAEP1B,YAAMwB,QAFC;AAGPG,aAAO5B,YAAYyB,QAAZ;AAHA,KAAT;AAKD,GA1BD,CA0BE,OAAOT,KAAP,EAAc;AACdP,QAAIK,MAAJ,CAAW,GAAX,EAAgBG,IAAhB,CAAqB;AACnBY,WAAKb,KADc;AAEnBA,aAAO;AAFY,KAArB;AAID;AACF,CAjCM","file":"AuthenticationControllers.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport { User } from '../models/index';\nimport config from '../config/config';\n\nfunction jwtSignUser(user) {\n  const ONE_WEEK = 60 * 60 * 24 * 7;\n  return jwt.sign(user, config.authentication.jwtSecret, {\n    expiresIn: ONE_WEEK,\n  });\n}\n\nexport const register = async (req, res) => {\n  try {\n    const user = await User.create(req.body);\n    console.log(user)\n    res.status(200).json(user)\n  } catch (error) {\n    res.status(409).send({\n      error: 'This email already in use.',\n    });\n  }\n};\n\nexport const login = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    const user = await User.find({\n      where: {\n        email,\n      },\n    });\n\n    if (!user) {\n      res.status(403).json({ error: 'The login information was incorrect' });\n    }\n    const isPasswordValid = await user.comparePassword(password);\n\n    console.log(isPasswordValid);\n\n    if (!isPasswordValid) {\n      res.status(403).json({ error: 'The login information was incorrect' });\n    }\n\n    const userJson = user.toJSON();\n    res.send({\n      message: 'Ok',\n      user: userJson,\n      token: jwtSignUser(userJson),\n    });\n  } catch (error) {\n    res.status(500).send({\n      err: error,\n      error: 'An error has occured trying to log in',\n    });\n  }\n};\n"]}