{"version":3,"sources":["../../src/controllers/AuthenticationControllers.js"],"names":["jwtSignUser","user","ONE_WEEK","sign","authentication","jwtSecret","expiresIn","register","req","res","User","create","body","send","toJSON","error","status","login","email","password","find","where","json","isPasswordValid","comparePassword","console","log","userJson","message","token","err"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,WAAT,CAAqBC,IAArB,EAA2B;AACzB,QAAMC,WAAW,KAAK,EAAL,GAAU,EAAV,GAAe,CAAhC;AACA,SAAO,uBAAIC,IAAJ,CAASF,IAAT,EAAe,iBAAOG,cAAP,CAAsBC,SAArC,EAAgD;AACrDC,eAAWJ;AAD0C,GAAhD,CAAP;AAGD;;AAEM,MAAMK,8BAAW,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC1C,MAAI;AACF,UAAMR,OAAO,MAAM,gBAAGS,IAAH,CAAQC,MAAR,CAAeH,IAAII,IAAnB,CAAnB;AACAH,QAAII,IAAJ,CAASZ,KAAKa,MAAL,EAAT;AACD,GAHD,CAGE,OAAOC,KAAP,EAAc;AACdN,QAAIO,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AACnBE,aAAO;AADY,KAArB;AAGD;AACF,CATM;;AAWA,MAAME,wBAAQ,OAAOT,GAAP,EAAYC,GAAZ,KAAoB;AACvC,MAAI;AACF,UAAM,EAAES,KAAF,EAASC,QAAT,KAAsBX,IAAII,IAAhC;;AAEA,UAAMX,OAAO,MAAM,gBAAGS,IAAH,CAAQU,IAAR,CAAa;AAC9BC,aAAO;AACLH;AADK;AADuB,KAAb,CAAnB;;AAMA,QAAI,CAACjB,IAAL,EAAW;AACTQ,UAAIO,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAAEP,OAAO,qCAAT,EAArB;AACD;AACD,UAAMQ,kBAAkB,MAAMtB,KAAKuB,eAAL,CAAqBL,QAArB,CAA9B;;AAEAM,YAAQC,GAAR,CAAYH,eAAZ;;AAEA,QAAI,CAACA,eAAL,EAAsB;AACpBd,UAAIO,MAAJ,CAAW,GAAX,EAAgBM,IAAhB,CAAqB,EAAEP,OAAO,qCAAT,EAArB;AACD;;AAED,UAAMY,WAAW1B,KAAKa,MAAL,EAAjB;AACAL,QAAII,IAAJ,CAAS;AACPe,eAAS,IADF;AAEP3B,YAAM0B,QAFC;AAGPE,aAAO7B,YAAY2B,QAAZ;AAHA,KAAT;AAKD,GA1BD,CA0BE,OAAOZ,KAAP,EAAc;AACdN,QAAIO,MAAJ,CAAW,GAAX,EAAgBH,IAAhB,CAAqB;AACnBiB,WAAKf,KADc;AAEnBA,aAAO;AAFY,KAArB;AAID;AACF,CAjCM","file":"AuthenticationControllers.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport db from '../models/index';\nimport config from '../config/config';\n\nfunction jwtSignUser(user) {\n  const ONE_WEEK = 60 * 60 * 24 * 7;\n  return jwt.sign(user, config.authentication.jwtSecret, {\n    expiresIn: ONE_WEEK,\n  });\n}\n\nexport const register = async (req, res) => {\n  try {\n    const user = await db.User.create(req.body);\n    res.send(user.toJSON());\n  } catch (error) {\n    res.status(409).send({\n      error: 'This email already in use.',\n    });\n  }\n};\n\nexport const login = async (req, res) => {\n  try {\n    const { email, password } = req.body;\n\n    const user = await db.User.find({\n      where: {\n        email,\n      },\n    });\n\n    if (!user) {\n      res.status(403).json({ error: 'The login information was incorrect' });\n    }\n    const isPasswordValid = await user.comparePassword(password);\n\n    console.log(isPasswordValid);\n\n    if (!isPasswordValid) {\n      res.status(403).json({ error: 'The login information was incorrect' });\n    }\n\n    const userJson = user.toJSON();\n    res.send({\n      message: 'Ok',\n      user: userJson,\n      token: jwtSignUser(userJson),\n    });\n  } catch (error) {\n    res.status(500).send({\n      err: error,\n      error: 'An error has occured trying to log in',\n    });\n  }\n};\n"]}