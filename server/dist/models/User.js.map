{"version":3,"sources":["../../src/models/User.js"],"names":["Promise","require","bcrypt","promisifyAll","hashPassword","user","options","SALT_FACTOR","changed","genSaltAsync","then","salt","hashAsync","password","hash","setDataValue","sequelize","DataTypes","User","define","email","type","STRING","unique","hooks","beforeCreate","beforeUpdate","beforeSave","prototype","comparePassword","console","log","compareAsync"],"mappings":";;;;;AAAA,MAAMA,UAAUC,QAAQ,UAAR,CAAhB;AACA,MAAMC,SAASF,QAAQG,YAAR,CAAqBF,QAAQ,eAAR,CAArB,CAAf;;AAEA,SAASG,YAAT,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqC;AACnC,QAAMC,cAAc,CAApB;;AAEA,MAAI,CAACF,KAAKG,OAAL,CAAa,UAAb,CAAL,EAA+B;AAC7B;AACD;;AAED,SAAON,OACJO,YADI,CACSF,WADT,EAEJG,IAFI,CAECC,QAAQT,OAAOU,SAAP,CAAiBP,KAAKQ,QAAtB,EAAgCF,IAAhC,CAFT,EAGJD,IAHI,CAGCI,QAAQ;AACZT,SAAKU,YAAL,CAAkB,UAAlB,EAA8BD,IAA9B;AACD,GALI,CAAP;AAMD;;kBAEc,CAACE,SAAD,EAAYC,SAAZ,KAA0B;AACvC,QAAMC,OAAOF,UAAUG,MAAV,CACX,MADW,EAEX;AACEC,WAAO;AACLC,YAAMJ,UAAUK,MADX;AAELC,cAAQ;AAFH,KADT;AAKEV,cAAUI,UAAUK;AALtB,GAFW,EASX;AACEE,WAAO;AACLC,oBAAcrB,YADT;AAELsB,oBAActB,YAFT;AAGLuB,kBAAYvB;AAHP;AADT,GATW,CAAb;AAiBAc,OAAKU,SAAL,CAAeC,eAAf,GAAiC,UAAShB,QAAT,EAAmB;AAClDiB,YAAQC,GAAR,CAAYlB,QAAZ;AACAiB,YAAQC,GAAR,CAAY,KAAKlB,QAAjB;;AAEAK,SAAKU,SAAL,CAAeC,eAAf,GAAiC,UAAShB,QAAT,EAAmB;AAClD,aAAOX,OAAO8B,YAAP,CAAoBnB,QAApB,EAA8B,KAAKA,QAAnC,CAAP;AACD,KAFD;AAGD,GAPD;;AASA,SAAOK,IAAP;AACD,C","file":"User.js","sourcesContent":["const Promise = require('bluebird');\nconst bcrypt = Promise.promisifyAll(require('bcrypt-nodejs'));\n\nfunction hashPassword(user, options) {\n  const SALT_FACTOR = 8;\n\n  if (!user.changed('password')) {\n    return;\n  }\n\n  return bcrypt\n    .genSaltAsync(SALT_FACTOR)\n    .then(salt => bcrypt.hashAsync(user.password, salt))\n    .then(hash => {\n      user.setDataValue('password', hash);\n    });\n}\n\nexport default (sequelize, DataTypes) => {\n  const User = sequelize.define(\n    'User',\n    {\n      email: {\n        type: DataTypes.STRING,\n        unique: true,\n      },\n      password: DataTypes.STRING,\n    },\n    {\n      hooks: {\n        beforeCreate: hashPassword,\n        beforeUpdate: hashPassword,\n        beforeSave: hashPassword,\n      },\n    },\n  );\n  User.prototype.comparePassword = function(password) {\n    console.log(password);\n    console.log(this.password);\n\n    User.prototype.comparePassword = function(password) {\n      return bcrypt.compareAsync(password, this.password);\n    };\n  };\n\n  return User;\n};\n"]}